version: 2.1
orbs:
  aws-s3: circleci/aws-s3@3.0.0
  aws-ecr: circleci/aws-ecr@8.1.2
  aws-ecs: circleci/aws-ecs@3.0.0
  # aws-cli: circleci/aws-cli@1.3
  # aws-cli: circleci/aws-cli@3.1.1
jobs:
  test:
    docker:
      - image: cimg/ruby:3.1.2
        environment:
          BUNDLER_VERSION: 2.3.7
          RAILS_ENV: test
          TZ: Asia/Tokyo
      - image: cimg/mysql:8.0.28
        command: mysqld --default-authentication-plugin=mysql_native_password
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_ROOT_HOST: '%'
          TZ: Asia/Tokyo

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-deps-{{ checksum "api/Gemfile.lock" }}
            - v1-deps-

      - run:
          name: Install dependencies
          working_directory: api
          command: |
            gem install bundler -v 2.3.7
            bundle check || bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          paths:
            - api/vendor/bundle
          key: v1-deps-{{ checksum "api/Gemfile.lock" }}

      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - run:
          name: Database set up
          working_directory: api
          command: |
            mv config/database.ci.yml config/database.yml
            bundle exec rake db:create
            bundle exec rake db:schema:load

      - run:
          name: Rubocop
          working_directory: api
          command: bundle exec rubocop
          when: always

      - run:
          name: Run tests
          working_directory: api
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"
            bundle exec rspec \
              --format progress \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES

  aws-s3-deploy:
    docker:
      - image: cimg/python:3.6
    steps:
      - checkout
      - aws-s3/copy:
          arguments: --recursive
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          from: frontend/build
          to: 's3://rkscz-bucket/'

  # update-tag:
  #   docker:
  #     - image: cimg/python:3.9.1
  #   steps:
  #     - aws-cli/setup:
  #         aws-region: AWS_REGION
  #     - aws-ecs/update-service:
  #         cluster: '${MY_APP_PREFIX}-cluster'
  #         container-image-name-updates: 'container=${MY_APP_PREFIX}-service,tag=stable'
  #         family: '${MY_APP_PREFIX}-service'

workflows:
  Test-and-Deploy:
    jobs:
      - test
      - aws-s3-deploy:
          requires:
            - test
          # filters:
          #   branches:
          #     only:
          #       - main

      - aws-ecr/build-and-push-image:
          requires:
            - test
          # filters:
          #   branches:
          #     only:
          #       - main
          dockerfile: Dockerfile_pro
          path: api/
          registry-id: AWS_ACCOUNT_ID
          repo: "${MY_APP_PREFIX}_pro_api"
          tag: "${CIRCLE_SHA1}"

      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
          family: "${MY_APP_PREFIX}-service"
          cluster: "${MY_APP_PREFIX}-cluster"
          container-image-name-updates: "container=api,image-and-tag=${AWS_ECR_ACCOUNT_URL}/${MY_APP_PREFIX}_pro_api:${CIRCLE_SHA1}"

      # - aws-ecr/build-and-push-image:
      #     requires:
      #       - test
      #     # filters:
      #     #   branches:
      #     #     only:
      #     #       - main
      #     dockerfile: Dockerfile
      #     path: nginx/
      #     registry-id: AWS_ACCOUNT_ID
      #     repo: rkscz_pro_nginx
      #     tag: "${CIRCLE_SHA1}"

      # - update-tag:
      #   requires:
      #     - aws-ecr/build-and-push-image
